Rubric Checklist
DONE(1): You’ll allow users to view and play trailers (either in the youtube app or a web browser).
DONE(2): You’ll allow users to read reviews of a selected movie.
WIP(3): You’ll also allow users to mark a movie as a favorite in the details view by tapping a button (star).
WIP(4): You'll make use of Android Architecture Components (Room, LiveData, ViewModel and Lifecycle) to create a robust an efficient application.
WIP(5): You'll create a database using Room to store the names and ids of the user's favorite movies (and optionally, the rest of the information needed to display their favorites collection while offline).
WIP(6): You’ll modify the existing sorting criteria for the main view to include an additional pivot to show their favorites collection.
WIP(7): App does not crash when rotating device

DONE (1): Users can view trailers (YOUTUBE OR WEB BROWSER)
    - When a trailer is selected, app uses an Intent to launch the trailer.

DONE(2): Read reviews of a selected movie.
    - Use constraint layout and material design to make the details page look nice
    - Query db for user reviews
    - Should we do a show more button?

WIP(3): Mark a movie as a favorite in the details view by tapping a button (star).
WIP(4): Use Android Architecture Components (Room, LiveData, ViewModel and Lifecycle) to create a robust an efficient application.
WIP(5): Create a database using Room to store the names and ids of the user's favorite movies (and optionally, the rest of the information needed to display their favorites collection while offline).
    - In the movies detail screen, a user can tap a button (for example, a star) to mark it as a Favorite. Tap the button on a favorite movie will unfavorite it.
    - The titles and IDs of the user’s favorite movies are stored using Room and are updated whenever the user favorites or unfavorites a movie. No other persistence libraries are used.
    - Database is implemented using Room. No other persistence libraries are used.
    - Database is not re-queried unnecessarily. LiveData is used to observe changes in the database and update the UI accordingly.
    - Database is not re-queried unnecessarily after rotation. Cached LiveData from ViewModel is used instead.
    - App requests for related videos for a selected movie via the /movie/{id}/videos endpoint in a background thread and displays those details when the user selects a movie.

WIP(6): New sort criteria to show favorites collection.
    - When the "favorites" setting option is selected, the main view displays the entire favorites collection based on movie ids stored in the database.

WIP(7): Handle screen rotation by storing json string and sortOption on MainActivity, then extras on details_activity

DONE Do the codelab
DONE Use the endpoints trailer, reviews
DONE Create views in details activity
4. ROOM implementation
     - entity
     - dao
     - database
     - repository
     - viewmodel
     - click listener on star
     - sort by favorites

QUESTION: Why a List over ArrayList

trailers
- add thumbnail of actual trailer (Use glide to fetch thumbnails)
- add background image like a play button
- exo player for android

Reviews
- set your respective view multiple view holders (use 3 viewholders)
- merge adapter (merge extra content)
- snippet of reviews. regular text view is fine (add 3, then use 3 more)

Viewmodel
- Room database and view model should be the single source of truth

mFilter setValue()
Transformations.switchMap(filter, MovieRepository::getMovies)
mutabledata

MutableLiveData

lambda function ->
 new Observer()
 onChanged()







